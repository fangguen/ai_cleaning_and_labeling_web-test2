# Generated by Django 5.1.2 on 2024-10-27 11:56

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('mainapp', '0001_initial'),
    ]

    def create_default_dimensions(apps, schema_editor):
        ProcessingDimension = apps.get_model('mainapp', 'ProcessingDimension')
        SystemPrompt = apps.get_model('mainapp', 'SystemPrompt')
        
        # 创建默认的系统提示词
        default_prompts = {
            'cleaning': {
                'content': (
                    '你是一个专业的文本清洗助手。请根据用户提供的维度清洗文本，并以JSON格式返回结果。清洗时请遵循以下原则：\n'
                    '1. 保持文本的原意\n'
                    '2. 只处理指定的维度\n'
                    '3. 处理后无需进行具体解释说明，直接输出文本即可\n'
                    '4. 严格按照提供的json示例输出'
                ),
                'json_schema': '{\n"input": "原始文本",\n"output": "清洗后的文本"\n}'
            },
            'labeling': {
                'content': (
                    '你是一个专业的文本标注助手。请根据用户提供的维度标注文本，并以JSON格式返回结果。标注时请遵循以下原则：'
                    '1. 客观分析文本内容\n'
                    '2. 只标注指定的维度\n'
                    '3.处理后无需进行具体说明处理了那些地方，直接输出结果即可。\n'
                    '4.需要对输入文本进行切分，然后对不同的句子或者段落分别标注，而不是直接对输入的文本进行整体标注。\n'
                    '5.严格按照提供的json示例输出，只有input和output两个元素'
                ),
                'json_schema': '{\n"input":"(输入的一句话，如：说实话，最近一直感觉不太好，心情很低落。）",\n"output":"（标准的维度对应的值，如角色=咨询者，情感=焦虑，心理症状=轻度焦虑，意图=寻求帮助）"\n}'
            },
            'chat': {
                'content': '你是一个专业的助手，风趣幽默真实客观地回答用户所有合理问题。数学问题用LaTeX 规范输出。',
                'json_schema': None
            }
        }
        
        for prompt_type, data in default_prompts.items():
            SystemPrompt.objects.create(
                type=prompt_type,
                content=data['content'],
                json_schema=data['json_schema'],
                is_default=True
            )
        
        # 清洗维度
        cleaning_dimensions = [
            ("去除真实人名", "清理文本中出现的真实人名，保护隐私"),
            ("处理缺失和不完整数据", "处理数据中的空值和不完整部分"),
            ("数据规范化", "统一数据格式和表达方式"),
            ("去除特殊字符和标点", "清理不必要的特殊字符和标点符号"),
            ("停用词处理", "去除常见的停用词"),
            ("分词和词形还原", "进行分词处理和词形还原"),
            ("处理冗余信息", "删除重复和冗余的内容"),
            ("匿名化", "对敏感信息进行匿名化处理"),
            ("纠正语法和拼写错误", "修正文本中的语法和拼写问题")
        ]
        
        for order, (name, desc) in enumerate(cleaning_dimensions):
            ProcessingDimension.objects.create(
                type='cleaning',
                name=name,
                description=desc,
                is_default=True,
                order=order
            )
        
        # 标注维度
        labeling_dimensions = [
            ("情感", "分析文本的情感倾向"),
            ("心理症状", "识别文本中的心理健康相关症状"),
            ("意图", "判断文本作者的意图"),
            ("角色", "确定文本中的说话者角色")
        ]
        
        for order, (name, desc) in enumerate(labeling_dimensions):
            ProcessingDimension.objects.create(
                type='labeling',
                name=name,
                description=desc,
                is_default=True,
                order=order
            )

    def reverse_migrations(apps, schema_editor):
        ProcessingDimension = apps.get_model('mainapp', 'ProcessingDimension')
        SystemPrompt = apps.get_model('mainapp', 'SystemPrompt')
        ProcessingDimension.objects.all().delete()
        SystemPrompt.objects.all().delete()

    operations = [
        migrations.RunPython(create_default_dimensions, reverse_migrations),
    ]
